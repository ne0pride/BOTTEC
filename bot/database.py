import asyncpg
from config import DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
from logger import logger
import pandas as pd
class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""

    _instance = None

    def __new__(cls, *args, **kwargs):
        """–æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞"""
        if not cls._instance:
            cls._instance = super(Database, cls).__new__(cls)
        return cls._instance

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        if not hasattr(self, "pool"):
            self.pool = None

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î."""
        if not self.pool:
            try:
                self.pool = await asyncpg.create_pool(
                    database=DB_NAME, user=DB_USER, password=DB_PASSWORD,
                    host=DB_HOST, port=DB_PORT
                )
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    async def execute(self, query: str, *args):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å (INSERT, UPDATE, DELETE)."""
        async with self.pool.acquire() as conn:
            return await conn.execute(query, *args)

    async def fetch(self, query: str, *args):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å (SELECT) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫."""
        async with self.pool.acquire() as conn:
            return await conn.fetch(query, *args)

    async def fetchrow(self, query: str, *args):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å (SELECT) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(query, *args)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
        if self.pool:
            await self.pool.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

    async def get_categories(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        return await self.fetch("SELECT id, name FROM categories")

    async def get_products_by_category(self, category_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return await self.fetch("SELECT id, name, price FROM products WHERE category_id = $1", category_id)

    async def get_subcategories(self, category_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return await self.fetch("SELECT id, name FROM subcategories WHERE category_id = $1", category_id)

    async def get_product_by_subcategory(self, subcategory_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return await self.fetchrow("SELECT * FROM products WHERE subcategory_id = $1 LIMIT 1", subcategory_id)

    async def get_products_by_subcategory(self, subcategory_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return await self.fetch(
            "SELECT id, name, description, price, image_url FROM products WHERE subcategory_id = $1",
            subcategory_id)

    async def add_to_cart(self, user_id: int, product_id: int, quantity: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å."""
        await self.execute("""
            INSERT INTO cart (user_id, product_id, quantity)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id, product_id) DO UPDATE
            SET quantity = cart.quantity + EXCLUDED.quantity;
        """, user_id, product_id, quantity)

        logger.info(f"‚úÖ {user_id} –¥–æ–±–∞–≤–∏–ª {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É.")

    async def get_cart(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return await self.fetch("""
            SELECT c.product_id, p.name, p.price, c.quantity 
            FROM cart c
            JOIN products p ON c.product_id = p.id
            WHERE c.user_id = $1
        """, user_id)

    async def remove_from_cart(self, user_id: int, product_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        await self.execute("DELETE FROM cart WHERE user_id = $1 AND product_id = $2", user_id, product_id)
        logger.info(f"üóë User {user_id} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä ID {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

    async def clear_cart(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        await self.execute("DELETE FROM cart WHERE user_id = $1", user_id)
        logger.info(f"üóë User {user_id} –æ—á–∏—Å—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É.")

    async def create_order(self, user_id: int, address: str, phone: str, total_price: float) -> int:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
        order_id = await self.fetchrow("""
            INSERT INTO orders (user_id, address, phone, total_price)
            VALUES ($1, $2, $3, $4) RETURNING order_id;
        """, user_id, address, phone, total_price)
        return order_id["order_id"]

    async def add_order_item(self, order_id: int, product_id: int, quantity: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑."""
        await self.execute("""
            INSERT INTO order_items (order_id, product_id, quantity)
            VALUES ($1, $2, $3);
        """, order_id, product_id, quantity)

    async def get_order_items(self, order_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ."""
        return await self.fetch("""
            SELECT p.name, p.price, oi.quantity 
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            WHERE oi.order_id = $1
        """, order_id)



    async def get_all_orders(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î."""
        return await self.fetch("""
            SELECT o.order_id, o.user_id, o.address, o.phone, o.total_price, o.status, oi.product_id, p.name, oi.quantity
            FROM orders o
            JOIN order_items oi ON o.order_id = oi.order_id
            JOIN products p ON oi.product_id = p.id
            ORDER BY o.order_id DESC
        """)

    async def generate_orders_csv(self) -> str:
        """–°–æ–∑–¥–∞—ë—Ç CSV-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
        orders = await self.get_all_orders()

        if not orders:
            return None  # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df = pd.DataFrame(orders)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        df.columns = ["Order ID", "User ID", "Address", "Phone", "Total Price (RUB)", "Status", "Product ID",
                      "Product Name", "Quantity"]

        # –°–æ–∑–¥–∞—ë–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = "orders.csv"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
        df.to_csv(file_path, index=False, encoding="utf-8-sig")

        return file_path

    async def add_user(self, user_id: int, username: str, full_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ."""
        await self.execute("""
            INSERT INTO users (user_id, username, full_name)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) DO NOTHING;
        """, user_id, username, full_name)

        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} - {full_name} (@{username})")

    async def add_faq(self, question: str, answer: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ FAQ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
        await self.execute("""
            INSERT INTO faq (question, answer)
            VALUES ($1, $2)
            ON CONFLICT (question) DO UPDATE SET answer = EXCLUDED.answer;
        """, question, answer)

        logger.info(f"üìå –î–æ–±–∞–≤–ª–µ–Ω FAQ: {question}")

    async def get_faq(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""
        return await self.fetch("SELECT id, question, answer FROM faq")

    async def get_faq_by_question(self, question: str):
        """–ò—â–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –ë–î."""
        return await self.fetchrow("SELECT answer FROM faq WHERE question = $1", question)