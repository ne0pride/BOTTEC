from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup,ReplyKeyboardMarkup, KeyboardButton
from database import Database

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
async def subscribe_keyboard(channel_link: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel_link)],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="sub_check")]
    ])
    return keyboard

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è FAQ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard


CATEGORIES_PER_PAGE = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–≤–∞–ª —Å–∞–º,
# —Å–∫–æ–ª—å–∫–æ –æ–Ω —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async def categories_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
    db = Database()
    categories = await db.get_categories()
    total_pages = (len(categories) - 1) // CATEGORIES_PER_PAGE + 1
    start, end = page * CATEGORIES_PER_PAGE, (page + 1) * CATEGORIES_PER_PAGE
    buttons = [[InlineKeyboardButton(text=cat["name"], callback_data=f"category_{cat['id']}")] for cat in categories[start:end]]

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"page_{page + 1}"))

    return InlineKeyboardMarkup(inline_keyboard=buttons + [navigation_buttons] if navigation_buttons else buttons)

SUBCATEGORIES_PER_PAGE = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def subcategories_keyboard(category_id: int, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
    db = Database()
    subcategories = await db.get_subcategories(category_id)
    total_pages = (len(subcategories) - 1) // SUBCATEGORIES_PER_PAGE + 1
    start, end = page * SUBCATEGORIES_PER_PAGE, (page + 1) * SUBCATEGORIES_PER_PAGE
    buttons = [[InlineKeyboardButton(text=sub["name"], callback_data=f"subcategory_{sub['id']}")] for sub in subcategories[start:end]]

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"subcat_page_{category_id}_{page - 1}"))
    if page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"subcat_page_{category_id}_{page + 1}"))

    return InlineKeyboardMarkup(inline_keyboard=buttons + [navigation_buttons] if navigation_buttons else buttons)


async def product_navigation_keyboard(subcategory_id: int, product_index: int, total_products: int,
                                      product_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    buttons = [
        [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")]
    ]

    navigation_buttons = []
    if product_index > 0:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"product_page_{subcategory_id}_{product_index - 1}"))
    if product_index < total_products - 1:
        navigation_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"product_page_{subcategory_id}_{product_index + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def confirm_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–≤–µ–∂–¥—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cart"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cart")]
    ])
    return keyboard



async def cart_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã."""
    db = Database()
    cart_items = await db.get_cart(user_id)

    buttons = []
    if not cart_items:
        return None

    for item in cart_items:
        buttons.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']}", callback_data=f"remove_{item['product_id']}")])

    buttons.append([InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

