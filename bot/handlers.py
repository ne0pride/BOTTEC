import os

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram import F

from aiogram import Bot, types
import re
from config import CHANNEL, YOOKASSA_PROVIDER_TOKEN
from keyboards import subscribe_keyboard, main_keyboard, categories_keyboard, subcategories_keyboard, \
    product_navigation_keyboard, confirm_keyboard, cart_keyboard
from logger import logger
from database import Database
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
router = Router()

class OrderState(StatesGroup):
    waiting_for_address = State()
    waiting_for_phone = State()
    waiting_for_payment = State()

class CartState(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_confirmation = State()

class FAQState(StatesGroup):
    waiting_for_answer = State()


async def check_subscription(user_id: int, bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await bot.get_chat_member(chat_id=CHANNEL, user_id=user_id)
        is_subscribed = chat_member.status in ["member", "administrator", "creator"]

        logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: User {user_id} {'–ü–û–î–ü–ò–°–ê–ù' if is_subscribed else '–ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω'}")
        return is_subscribed
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É User {user_id}: {e}")
        return False  # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω


@router.message(Command("start"))
async def start_handler(message: types.Message, bot):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    full_name = message.from_user.full_name
    db = Database()
    await db.add_user(user_id, username, full_name)
    if not await check_subscription(user_id, bot):
        logger.warning(f"üö® {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
        await message.answer(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è'.",
            reply_markup=await subscribe_keyboard(f"https://t.me/{CHANNEL.lstrip('@')}")
        )
        return
    logger.info(f"‚úÖ {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await main_keyboard())

@router.callback_query(lambda c: c.data == "sub_check")
async def check_subscription_callback(callback: types.CallbackQuery, bot):
    user_id = callback.from_user.id
    if await check_subscription(user_id, bot):
        logger.info(f"‚úÖ {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await main_keyboard())
    else:
        logger.warning(f"üö®{user_id} –Ω–∞–∂–∞–ª '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è', –Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–≤–ª—Å—è")
        await callback.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@router.message(lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: types.Message):
    logger.info(f"üì¶ {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–∞–ª–æ–≥.")
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await categories_keyboard(page=0))

@router.callback_query(lambda c: c.data.startswith("page_"))
async def pagination_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    page = int(callback.data.split("_")[1])
    logger.info(f"üìÑ {callback.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ {page}.")
    keyboard = await categories_keyboard(page)
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("category_"))
async def category_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    category_id = int(callback.data.split("_")[1])
    logger.info(f"‚úÖ {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ID {category_id}.")
    keyboard = await subcategories_keyboard(category_id, page=0)
    await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("subcat_page_"))
async def subcategory_pagination_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    try:
        data_parts = callback.data.split("_")
        category_id = int(data_parts[2])  # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        page = int(data_parts[3])  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        logger.info(f"üìÑ {callback.from_user.id} –ª–∏—Å—Ç–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
        keyboard = await subcategories_keyboard(category_id, page)
        await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")


@router.callback_query(lambda c: c.data.startswith("subcategory_"))
async def subcategory_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä."""
    subcategory_id = int(callback.data.split("_")[1])
    db = Database()
    products = await db.get_products_by_subcategory(subcategory_id)

    if products:
        product = products[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
        total_products = len(products)
        logger.info(f"üõç User {callback.from_user.id} —Å–º–æ—Ç—Ä–∏—Ç —Ç–æ–≤–∞—Ä {product['name']} (ID {product['id']}).")

        text = f"üõç *{product['name']}*\nüí∞ –¶–µ–Ω–∞: ${product['price']}\nüìú {product['description']}"
        keyboard = await product_navigation_keyboard(subcategory_id, 0, total_products, product['id'])

        await callback.message.delete()
        await callback.message.answer_photo(photo=product['image_url'], caption=text, reply_markup=keyboard,
                                            parse_mode="Markdown")
    else:
        await callback.answer("‚ùå –í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("product_page_"))
async def product_pagination_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É)."""
    try:
        data_parts = callback.data.split("_")
        subcategory_id = int(data_parts[2])  # ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        product_index = int(data_parts[3])  # –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞

        db = Database()
        products = await db.get_products_by_subcategory(subcategory_id)

        if 0 <= product_index < len(products):
            product = products[product_index]
            logger.info(
                f"üõç {callback.from_user.id} –ª–∏—Å—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä {product['name']} (ID {product['id']}), –ø–æ–∑–∏—Ü–∏—è {product_index}.")

            text = f"üõç *{product['name']}*\nüí∞ –¶–µ–Ω–∞: ${product['price']}\nüìú {product['description']}"
            keyboard = await product_navigation_keyboard(subcategory_id, product_index, len(products), product['id'])

            await callback.message.delete()
            await callback.message.answer_photo(photo=product['image_url'], caption=text, reply_markup=keyboard,
                                                parse_mode="Markdown")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞.")

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    try:
        data = callback.data.split("_")
        product_id = int(data[3])
        await state.update_data(product_id=product_id)
        await state.set_state(CartState.waiting_for_quantity)
        logger.info(f"üõí {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä {product_id}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        await callback.message.delete()
        await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (—á–∏—Å–ª–æ):")

    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")


@router.message(CartState.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    quantity = int(message.text)
    if quantity < 1:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1.")
        return

    await state.update_data(quantity=quantity)
    await state.set_state(CartState.waiting_for_confirmation)

    logger.info(f"üõí {message.from_user.id} –≤—ã–±—Ä–∞–ª {quantity} —à—Ç., –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await message.answer(f"–î–æ–±–∞–≤–∏—Ç—å {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=await confirm_keyboard())

@router.callback_query(lambda c: c.data == "confirm_cart")
async def confirm_cart_callback(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = await state.get_data()
    user_id = callback.from_user.id
    product_id = data.get("product_id")
    quantity = data.get("quantity")

    db = Database()
    await db.add_to_cart(user_id, product_id, quantity)

    logger.info(f"‚úÖ {user_id} –¥–æ–±–∞–≤–∏–ª {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\nüìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await main_keyboard())

@router.callback_query(lambda c: c.data == "cancel_cart")
async def cancel_cart_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    await state.clear()
    logger.info(f"‚ùå {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    await callback.message.delete()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –æ—Ç–º–µ–Ω–µ–Ω–æ.")





@router.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = Database()
    cart_items = await db.get_cart(message.from_user.id)

    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n"
    total_price = 0

    for item in cart_items:
        item_total = float(item['price']) * item['quantity']
        total_price += item_total
        text += f"üîπ {item['name']} - {item['quantity']} —à—Ç. *${item_total:.2f}*\n"

    text += f"\nüí∞ *–ò—Ç–æ–≥–æ: ${total_price:.2f}*"

    keyboard = await cart_keyboard(message.from_user.id)

    logger.info(f"üõí User {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–Ω—É.")
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_from_cart_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    db = Database()

    await db.remove_from_cart(user_id, product_id)
    logger.info(f"üóë {user_id} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä ID {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")
    await callback.message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    keyboard = await cart_keyboard(user_id)
    if keyboard:
        await callback.message.answer("üõí *–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:*", reply_markup=keyboard, parse_mode="Markdown")
    else:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

@router.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    db = Database()

    await db.clear_cart(user_id)
    logger.info(f"üóë {user_id} –æ—á–∏—Å—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É.")

    await callback.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.message.delete()
    await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

@router.callback_query(lambda c: c.data == "checkout")
async def checkout_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."""
    await state.set_state(OrderState.waiting_for_address)
    logger.info(f"üì¶{callback.from_user.id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
    await callback.message.delete()
    await callback.message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")


@router.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await state.update_data(address=message.text)
    await state.set_state(OrderState.waiting_for_phone)

    logger.info(f"üìç {message.from_user.id} –≤–≤—ë–ª –∞–¥—Ä–µ—Å: {message.text}")

    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")



@router.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext, bot: Bot):
    try:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Invoice –≤ Telegram."""
        phone_pattern = re.compile(r"^\+?\d{10,15}$")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10-15 —Ü–∏—Ñ—Ä

        if not phone_pattern.match(message.text):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å `+`).")
            return

        await state.update_data(phone=message.text)
        data = await state.get_data()
        user_id = message.from_user.id
        address = data.get("address")
        phone = data.get("phone")

        db = Database()
        cart_items = await db.get_cart(user_id)

        if not cart_items:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            await state.clear()
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏
        total_price_cents = sum(int(round(float(item['price']) * item['quantity'] * 100)) for item in cart_items)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (100 —Ä—É–±–ª–µ–π = 10000 –∫–æ–ø–µ–µ–∫)
        MIN_ORDER_AMOUNT_CENTS = 10000  # 100 —Ä—É–±–ª–µ–π
        if total_price_cents < MIN_ORDER_AMOUNT_CENTS:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ - 100 —Ä—É–±–ª–µ–π.\n–í–∞—à –∑–∞–∫–∞–∑: {total_price_cents / 100:.2f} RUB.")
            await state.clear()
            return

        order_id = await db.create_order(user_id, address, phone, total_price_cents / 100)  # –•—Ä–∞–Ω–∏–º —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö

        for item in cart_items:
            await db.add_order_item(order_id, item["product_id"], item["quantity"])

        await state.set_state(OrderState.waiting_for_payment)

        logger.info(f"üí∞ User {user_id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ —Å—É–º–º—É {total_price_cents / 100:.2f} RUB.")

        prices = [
            types.LabeledPrice(
                label=f"{item['name']} ({item['quantity']} —à—Ç.)",
                amount=int(round(float(item['price']) * item['quantity'] * 100))  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–ø–µ–π–∫–∏
            )
            for item in cart_items
        ]

        await bot.send_invoice(
            chat_id=user_id,
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=f"–ó–∞–∫–∞–∑ #{order_id}, —Å—É–º–º–∞: {total_price_cents / 100:.2f} RUB",
            provider_token=YOOKASSA_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="order_payment",
            payload=str(order_id)
        )
        print('WQE')
    except Exception as e:
        logger.error(f" Error occurred while processing order: {e}")
        await message.answer("–û—à–∏–±–∫–∞: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        await state.clear()


@router.pre_checkout_query(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        print('W32QE')

    except Exception as e:
        print('Z asd')
        logger.error(f"Error occurred while processing pre-checkout query: {e}")


@router.message(lambda message: message.successful_payment)
async def process_successful_payment(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É."""
    try:
        print("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

        user_id = message.from_user.id
        order_id = int(message.successful_payment.invoice_payload)

        logger.info(f"‚úÖ  {user_id} –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ #{order_id}.")
        db = Database()
        await db.execute("UPDATE orders SET status = 'paid' WHERE order_id = $1", order_id)
        await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        logger.error(f"Error occurred while processing successful payment: {e}")
        await message.answer("–û—à–∏–±–∫–∞: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

@router.message(Command("orders"))
async def send_orders_csv(message: types.Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏."""
    db = Database()
    file_path = await db.generate_orders_csv()

    if not file_path:
        await message.answer("üìÇ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV-—Ñ–∞–π–ª
    await bot.send_document(message.chat.id, types.FSInputFile(file_path), caption="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã –≤ CSV-—Ñ–∞–π–ª–µ")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(file_path)

    logger.info(f"üìÇ User {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª CSV —Å –∑–∞–∫–∞–∑–∞–º–∏.")


@router.message(lambda message: message.text == "‚ÑπÔ∏è FAQ")
async def show_faq_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ."""
    db = Database()
    faq_items = await db.get_faq()

    if not faq_items:
        await message.answer("‚ÑπÔ∏è FAQ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    text = "üìå *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
    buttons = []

    for item in faq_items:
        text += f"‚ùì {item['question']}\n"
        buttons.append([InlineKeyboardButton(text=item["question"], callback_data=f"faq_{item['id']}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    logger.info(f"‚ÑπÔ∏è {message.from_user.id} –æ—Ç–∫—Ä—ã–ª FAQ.")
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(lambda c: c.data.startswith("faq_"))
async def faq_answer_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."""
    faq_id = int(callback.data.split("_")[1])
    db = Database()
    faq_items = await db.get_faq()

    for item in faq_items:
        if item["id"] == faq_id:
            logger.info(f"üìå {callback.from_user.id} –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ FAQ: {item['question']}")
            await callback.message.edit_text(f"üìå *{item['question']}*\n\n{item['answer']}", parse_mode="Markdown")
            return

    await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(FAQState.waiting_for_answer)
async def save_faq_answer(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ FAQ."""
    data = await state.get_data()
    question = data.get("question")
    answer = message.text

    db = Database()
    await db.add_faq(question, answer)

    logger.info(f"‚úÖ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {question} - {answer}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@router.message()
async def auto_add_faq(message: types.Message, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ FAQ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    db = Database()
    existing_answer = await db.get_faq_by_question(message.text)

    if existing_answer:
        await message.answer(f"‚ÑπÔ∏è {existing_answer['answer']}")
        return

    await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ:")

    # –í–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_state(FAQState.waiting_for_answer)
    await state.update_data(question=message.text)

    logger.info(f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: {message.text}")





